name: Build SlideShow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"] # Use only Python 3.12 for consistency

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-dev build-essential
          # Verify tkinter is working
          python -c "import tkinter; print('tkinter imported successfully')"

      - name: Debug Windows environment
        if: matrix.os == 'windows-latest'
        run: |
          echo "Windows Python setup:"
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import tkinter; print('tkinter available')" || echo "tkinter not available"
          echo "Current directory contents:"
          dir

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Verify installations
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import PyInstaller; print(f'PyInstaller: {PyInstaller.__version__}')"
          python -c "import PIL; print(f'Pillow: {PIL.__version__}')"

      - name: Build with PyInstaller
        run: |
          echo "Current working directory: $(pwd)"
          echo "Python executable: $(which python)"
          echo "Contents of current directory:"
          ls -la
          python build.py

      - name: Create artifact name
        id: artifact
        shell: bash
        run: |
          OS_NAME="${{ matrix.os }}"
          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            OS_NAME="linux"
          elif [[ "$OS_NAME" == "windows-latest" ]]; then
            OS_NAME="windows"
          elif [[ "$OS_NAME" == "macos-latest" ]]; then
            OS_NAME="macos"
          fi
          echo "name=SlideShow-${OS_NAME}-python${{ matrix.python-version }}" >> $GITHUB_OUTPUT

      - name: Upload artifacts (Linux/Windows)
        if: matrix.os != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: |
            dist/SlideShow/
            !dist/SlideShow/**/*.pyc

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: |
            dist/SlideShow.app/
            !dist/SlideShow.app/**/*.pyc

      # Only upload to release if this is a release event
      - name: Create release archive (Linux/Windows)
        if: github.event_name == 'release' && matrix.os != 'macos-latest' && matrix.python-version == '3.12'
        shell: bash
        run: |
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a SlideShow-windows.zip SlideShow/
          else
            zip -r SlideShow-linux.zip SlideShow/
          fi

      - name: Upload to Release (Linux/Windows)
        if: github.event_name == 'release' && matrix.os != 'macos-latest' && matrix.python-version == '3.12'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            gh release upload ${{ github.event.release.tag_name }} SlideShow-windows.zip
          else
            gh release upload ${{ github.event.release.tag_name }} SlideShow-linux.zip
          fi

      - name: Create macOS release archive
        if: github.event_name == 'release' && matrix.os == 'macos-latest' && matrix.python-version == '3.12'
        run: |
          cd dist
          zip -r SlideShow-macos.zip SlideShow.app

      - name: Upload to Release (macOS)
        if: github.event_name == 'release' && matrix.os == 'macos-latest' && matrix.python-version == '3.12'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd dist
          gh release upload ${{ github.event.release.tag_name }} SlideShow-macos.zip
